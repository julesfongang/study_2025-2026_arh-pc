---
title: "Отчёт по лабораторной работе №2"
author: "МВЕТУВОП ФОНГАНГ ДЖУЛС ФЕРРИ 1132255560 НБИбд-02-25"
date: "2025"
---

# Содержание

1 Цель работы    

2 Задание   

3 Теоретическое введение   

4 Выполнение лабораторной работы   

5 Выводы  

Список литературы   

# Список иллюстраций

4.1 Настройка имени и email в Git ...... 8  
4.2 Создание репозитория и первый коммит ...... 8  
4.3 Настройка подключения к GitHub ...... 9  

# 1 Цель работы

Целью работы является освоение основных возможностей системы контроля версий Git, изучение основных команд для работы с репозиториями и получение практических навыков работы с удаленными репозиториями на GitHub.

# 2 Задание

1. Изучить идеологию и применение системы контроля версий
2. Освоить основные команды Git
3. Научиться создавать и работать с локальными и удаленными репозиториями
4. Приобрести навыки работы с GitHub

# 3 Теоретическое введение

Система контроля версий Git — это распределенная система управления версиями, созданная Линусом Торвальдсом для управления разработкой ядра Linux. Git позволяет отслеживать изменения в файлах и координировать работу нескольких людей над одним проектом.

## Основные команды Git включают:

- **`git init`** — инициализация нового репозитория
- **`git add`** — добавление файлов в индекс для следующего коммита
- **`git commit`** — создание коммита с сохранением изменений
- **`git status`** — просмотр текущего состояния репозитория
- **`git log`** — просмотр истории коммитов
- **`git push`** — отправка локальных изменений на удаленный репозиторий
- **`git pull`** — получение изменений из удаленного репозитория

Git использует распределенную архитектуру, где каждый разработчик имеет полную копию репозитория, что обеспечивает высокую надежность и позволяет работать оффлайн.

Более подробно о Git см. в [1, 2].

# 4 Выполнение лабораторной работы

## 4.1 Настройка Git

Первым этапом была настройка имени пользователя и email для Git (рис. 4.1). Это необходимо для идентификации автора коммитов.

![Настройка имени и email в Git](image/2.png)  
Рисунок 4.1: Настройка имени и email в Git

## 4.2 Создание локального репозитория

Был создан новый репозиторий с помощью команды `git init`. Затем были добавлены файлы в индекс и создан первый коммит (рис. 4.2).

![Создание репозитория и первый коммит](image/9.png)  
Рисунок 4.2: Создание репозитория и первый коммит

## 4.3 Работа с удаленным репозиторием

Была выполнена настройка подключения к GitHub и отправка локальных изменений на удаленный репозиторий (рис. 4.3).

![Настройка подключения к GitHub](image/1.png)  
Рисунок 4.3: Настройка подключения к GitHub

## 4.4 Основные операции

В ходе работы были выполнены следующие операции:

- **Создание и переключение между ветками** с помощью команд `git branch` и `git checkout`
- **Разрешение конфликтов слияния** при объединении различных версий файлов
- **Работа с тегами** для отметки важных версий проекта
- **Просмотр истории изменений** с использованием `git log` с различными опциями
- **Использование `.gitignore`** для исключения временных и системных файлов из контроля версий

# 5 Выводы

В ходе выполнения лабораторной работы были достигнуты следующие результаты:

1. Освоены основные принципы работы системы контроля версий Git
2. Изучены и применены на практике основные команды Git
3. Приобретены навыки работы с локальными и удаленными репозиториями
4. Освоена работа с платформой GitHub для хостинга репозиториев
5. Получен опыт разрешения конфликтов слияния

Цель работы достигнута — освоены основные возможности системы контроля версий Git и приобретены практические навыки работы с репозиториями.

# Список литературы

[1] Scott Chacon and Ben Straub. _Pro Git_. Second. Apress, 2014. 456 pp. isbn: 978-1-4842-0077-3.

[2] Git documentation. _Git Reference Manual_. 2023. url: https://git-scm.com/doc.

[3] GitHub Guides. _GitHub Hello World_. 2023. url: https://guides.github.com/activities/hello-world/.
